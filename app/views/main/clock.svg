<?xml version='1.0' encoding='utf-8'?>
<!--
  based on siemens-clock.svg
  Copyright: 2012, RÃ¼diger Appel <ludi(at)me(dot)com>
             2014, Stefan Breunig

  Dual licensed under the MIT and GPL licenses.
-->

<svg xmlns='http://www.w3.org/2000/svg'
     xmlns:xlink='http://www.w3.org/1999/xlink'
     xmlns:ev='http://www.w3.org/2001/xml-events'
     version='1.1'
     baseProfile='full'
     width='100%'
     height='100%'
     viewBox='0 0 200 200'>

  <defs>
    <line id='threeHourStroke' x1='100' y1='0' x2='100' y2='20'
      style='stroke:#000; stroke-width:4.4; stroke-linecap:butt'/>

    <line id='hourStroke' x1='100' y1='0' x2='100' y2='15'
      style='stroke:#000; stroke-width:4.4; stroke-linecap:butt'/>

    <line id='minuteStroke' x1='100' y1='0' x2='100' y2='6'
      style='stroke:#000; stroke-width:1.6; stroke-linecap:butt'/>

    <symbol id='quarterStrokes'>
      <use xlink:href='#threeHourStroke' />
      <use xlink:href='#minuteStroke' transform='rotate( 6, 100, 100)'/>
      <use xlink:href='#minuteStroke' transform='rotate(12, 100, 100)'/>
      <use xlink:href='#minuteStroke' transform='rotate(18, 100, 100)'/>
      <use xlink:href='#minuteStroke' transform='rotate(24, 100, 100)'/>
      <use xlink:href='#hourStroke'   transform='rotate(30, 100, 100)'/>
      <use xlink:href='#minuteStroke' transform='rotate(36, 100, 100)'/>
      <use xlink:href='#minuteStroke' transform='rotate(42, 100, 100)'/>
      <use xlink:href='#minuteStroke' transform='rotate(48, 100, 100)'/>
      <use xlink:href='#minuteStroke' transform='rotate(54, 100, 100)'/>
      <use xlink:href='#hourStroke'   transform='rotate(60, 100, 100)'/>
      <use xlink:href='#minuteStroke' transform='rotate(66, 100, 100)'/>
      <use xlink:href='#minuteStroke' transform='rotate(72, 100, 100)'/>
      <use xlink:href='#minuteStroke' transform='rotate(78, 100, 100)'/>
      <use xlink:href='#minuteStroke' transform='rotate(84, 100, 100)'/>
    </symbol>
  </defs>

  <path id='durationMinutes' style='fill: rgba(255, 0, 0, 0.3)' />
  <circle id='durationHours' cx='100' cy='100' r='100' />

  <g style="text-shadow: 1px 1px 1px white, 1px -1px 1px white,  -1px 1px 1px white, -1px -1px 1px white">
    <g id='markEstimate' style='fill: #BB000B'>
      <text id='markEstimateText' x='110' y='98' font-family='sans-serif' font-size='15' transform='rotate(-90, 100, 100)'>estimated</text>
      <rect x='99.5' y='0' rx='0' ry='0' width='1' height='100' />
    </g>

    <g id='markArrival' style='fill: #00BB27'>
      <text x='130' y='98' font-family='sans-serif' font-size='15' transform='rotate(-90, 100, 100)'>arrived</text>
      <rect x='99.5' y='0' rx='0' ry='0' width='1' height='100' />
    </g>
  </g>

  <g>
    <use xlink:href='#quarterStrokes'/>
    <use xlink:href='#quarterStrokes' transform='rotate( 90, 100, 100)'/>
    <use xlink:href='#quarterStrokes' transform='rotate(180, 100, 100)'/>
    <use xlink:href='#quarterStrokes' transform='rotate(270, 100, 100)'/>
  </g>

  <rect id='handMinute' x='98' y='25' rx='2' ry='2' width='4' height='75'/>
  <rect id='handHour' x='97' y='45' rx='3' ry='3' width='6' height='55'/>

  <!-- axis cover -->
  <circle cx='100' cy='100' r='5'/>

  <script type='text/javascript'>
    <![CDATA[

    // read param value
    var frame = document.defaultView.frameElement;
    var params = frame.getElementsByTagName('param');
    for (var i = 0; i < params.length; i++) {
      this[params[i].name] = params[i].value;
    }

    var estimate = toDate(this.estimate);
    var arrival = toDate(this.arrival);

    var hasEstimate = estimate*1 > 0;
    var hasArrived = arrival*1 > 0;

    var durationHours = document.getElementById('durationHours');
    var durationMinutes = document.getElementById('durationMinutes');
    var markArrival = document.getElementById('markArrival');
    var markEstimate = document.getElementById('markEstimate');
    var markEstimateText = document.getElementById('markEstimateText');

    function toDate(ruby_time) {
      return new Date(Math.floor(ruby_time / 60) * 60*1000);
    }

    function render() {
      var now     = new Date();
      var hours   = now.getHours();
      var minutes = now.getMinutes();
      rotate('handHour',   hours * 30 + minutes * 0.5);
      rotate('handMinute', minutes * 6);

      rotate('markEstimate', estimate.getMinutes()*6);

      if(estimate > now && !hasArrived && hasEstimate) {
        var minsToGo = Math.ceil((estimate - now) / 1000 / 60);
        var waitHours = Math.floor(minsToGo / 60);
        var waitMinutes = minsToGo - waitHours * 60;

        calcMinutesArc(waitMinutes);
        rotate('durationMinutes', minutes * 6);

        durationHours.style.fill = 'rgba(255, 0, 0, '+0.3*waitHours+')';

      } else {
        durationHours.style.display = 'none';
        durationMinutes.style.display = 'none';
      }

      if(hasArrived) {
        rotate('markArrival', arrival.getMinutes()*6);
        markArrival.style.display = 'block';
        markEstimateText.style.display = 'none';
      } else {
        markArrival.style.display = 'none';
        markEstimateText.style.display = 'block';
      }

      if(!hasEstimate) {
        markEstimate.style.display = 'none';
        markEstimateText.style.display = 'none';
      }
    }

    function rotate(id, angle) {
      var elm = document.getElementById(id);
      elm.setAttribute('transform', 'rotate(' + angle + ', 100, 100)');
    }


    function polarToCartesian(x, y, radius, deg) {
      var rad = (deg-90) * Math.PI / 180.0;
      return {
        x: x + radius*Math.cos(rad),
        y: y + radius*Math.sin(rad)
      };
    }

    function calcMinutesArc(minutes) {
      var x = y = radius = 100;
      var minutes = minutes % 60;

      var end = polarToCartesian(x, y, radius, 6*minutes);
      var arcSweep = minutes > 30 ? 1 : 0;

      var d = [
          'M', x, y,
          'L', x, 0,
          'A', radius, radius, 0, arcSweep, 1, end.x, end.y
      ].join(' ');

      durationMinutes.setAttribute('d', d);
    }

    window.setInterval(render, 1000);
    render();
    ]]>
  </script>
</svg>

